<?php
/**
 * @file
 * Code for the River Guide feature.
 *
 * Uses containment structure of [country]/[region]/[river_name]/[section_name].
 *
 * @todo:
 * Bind context argument for region in URL to filter region.
 *
 * Force numeric field operator on class? https://drupal.org/node/1044884
 * Actually want simplified selection (e.g. > II), remove options from pulldown?
 *
 * Filters give unwieldy URL
 * http://d7rivers.local/nz/canterbury?region=All&field_river_name_value=&field_class_value_op=or&field_class_value=All&order=field_class&sort=desc
 *
 * Use hook_theme_registry_alter() to alter views output? e.g. rivername maps to nz/region/rivername.
 *
 * Need mapping from nz/[region]/[rivername]
 * to
 * 
 http://d7rivers.local/nz/hawkes-bay doesn't work
 */

include_once 'rivers_guide.features.inc';

/**
 * Define handler for redirect to riversguide.
 *
 * Implements hook_menu()
 */
function rivers_guide_menu() {

  $items['nz'] = array(
    'title' => 'Whitewater NZ',
    'page callback' => 'rivers_guide_redirect',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Redirect river guide to Whitewater NZ
 */
function rivers_guide_redirect() {
  $url = 'https://riverguide.co.nz/?from=' . $_GET['q'];

  if (user_access('administer nodes')) {
    drupal_set_message(t('Would be redirecting to @url', array('@url' => $url)), 'warning');
  }
  else {
    header('Location: ' . $url, TRUE, 301);
    // The "Location" header sends a redirect status code to the HTTP daemon. In
    // some cases this can be wrong, so we make sure none of the code below the
    // drupal_goto() call gets executed upon redirection.
    drupal_exit($url);
  }
}

/**
 * Implements hook_block_info().
 */
function rivers_guide_block_info() {

  $blocks['rivers_guide_editor_intro'] = array(
    'info' => t('Rivers guide editor intro'),
    'cache' => DRUPAL_NO_CACHE, //DRUPAL_CACHE_GLOBAL, // change to DRUPAL_CACHE_GLOBAL when done.
  );

  $blocks['rivers_guide_editor'] = array(
    'info' => t('Rivers guide editor'),
    'cache' => DRUPAL_CACHE_GLOBAL, // change to DRUPAL_CACHE_GLOBAL when done.
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function rivers_guide_block_view($delta = '') {
  switch ($delta) {
    case 'rivers_guide_editor_intro':
      drupal_add_css('sites/all/modules/custom/rivers_guide/rivers_guide.css');
      $block['subject'] = 'Important information re River Guide contributions';
      $block['content'] = '<ol>
<li>Ensure you have permission to post the material.</li>
<li>All guide contributions are published via a <a href="https://creativecommons.org/licenses/by-sa/3.0/nz">Creative Commons CC-BY-SA</a> licence.</li>
</ol>';
      return $block;
  }
}

/**
 * Implements hook_form_alter().
 */
function rivers_guide_form_alter(array &$form, array &$form_state = array(), $form_id = NULL) {
  switch ($form['#form_id']) {
    case 'section_node_form':
      $form['title']['#description'] = t('This is the title description.');
      break;
  }
}

/**
 * Force numeric operators like >, < for class filter.
 * Implements hook_field_views_data_views_data_alter().
 */
function rivers_guide_field_views_data_views_data_alter(&$data, $field) {
  //flog_it(__FUNCTION__ . ': data=' . print_r($data, TRUE) . ', field='. print_r($field, TRUE));
  //xdebug_break();
}

/**
 * https://drupal.stackexchange.com/questions/108085/drupal-how-to-create-a-custom-exposed-filter-in-views-3-in-drupal-7
 *
 * Implements hook_views_data_alter().
 */
function rivers_guide_views_data_alter(&$data) {
  //xdebug_break();
}

/**
 * Use argument e.g. canterbury to set region filter option 'Canterbury'.
 * Implements hook_views_pre_view().
 */
function rivers_guide_views_pre_view(&$view, &$display_id, &$args) {

  switch($view->name) {
    case 'rivers_sections':

      // Did we get here via view filter form submission?
      $page = $view->display[$display_id];
      $path = $view->display[$display_id]->handler->options['path'];

      $redirect = FALSE;
      // Map Region from filter to argument.
      // @test: nz/tasman sets Region filter to Tasman.
      if (!empty($_GET['region'])) {
        $region = _rivers_guide_map_filter_to_argument($_GET['region']);
        if (!empty($region)) {
          unset($_GET['region']); // Drop region from GET parameters because it is in the URL.
          $redirect = TRUE;
        }
      }

      // Map River name from filter to argument.
      if (!empty($_GET['river'])) {
        $river_name = _rivers_guide_map_filter_to_argument($_GET['river']);
        if (!empty($river_name)) {
          unset($_GET['river']); // Drop river from GET parameters because it is in the URL.
          $redirect = TRUE;
        }
      }

      // Redirect to new region and/or river name.
      if ($redirect) {
        unset($_GET['q']);
        $options = array('query' => $_GET);
        if (empty($river_name)) {
          drupal_goto($path . '/' . $region, $options);
        }
        else {
          drupal_goto($path . '/' . $region . '/' . $river_name, $options);
        }
      }

      // If Region is present in arguments, e.g. nz/{region} set filter value.
      if (!empty($args[0])) {
        $value = _rivers_guide_map_argument_to_filter_option($args[0]); // nz is view path, region=0.
        $view->display['default']->handler->options['filters']['field_region_value']['value'] = $value;
      }

      // If River name is present in arguments, e.g. nz/{region}/{river} set filter value.
      if (!empty($args[1])) {
        $value = _rivers_guide_map_argument_to_filter_option($args[1]); // nz is view path, region=0, river_name=1.
        $view->display['default']->handler->options['filters']['field_river_name_value']['value'] = $value;
      }
    break;
  }
}

/**
 * Map Canterbury => canterbury.
 */
function _rivers_guide_map_filter_to_argument($value) {
  return str_replace(
    array(' ', "'"),
    array('-', ''),
    strtolower($value)
  );
}

/**
 * Map region argument to filter options.
 */
function _rivers_guide_map_argument_to_filter_option($value) {
  // First pass, create words.
  $map = array("'" => '', '-' => ' ');
  $value = str_replace(array_keys($map), array_values($map), $value);
  // Capitalise words.
  $value = ucwords($value);
  $map = array('Of' => 'of', 'Hawkes' => "Hawke's");
  $value = str_replace(array_keys($map), array_values($map), $value);
  return $value;
}

function _rivers_guide_region_map() {
   $map = array(
     '' => '',
   );
}

/* @todo: split into distinct module? */

/**
 * Register custom formatter for Portage field.
 * This can be selected in views, for Portage field output.
 *
 * Implements hook_field_formatter_info().
 */
function rivers_guide_field_formatter_info() {
  return array(
    'rivers_guide_portage_formatter' => array( //Machine name of the formatter
      'label' => t('Portage'),
      'field types' => array('list_boolean'), //This will only be available to list_boolean fields
      //'settings'  => array( //Array of the settings we'll create
      //  'pic_size' => 'small', //give a default value for when the form is first loaded
      //  'tooltip' => 'Link to user Facebook page', //ditto
      //),
    ),
    'rivers_guide_node_reference_formatter' => array(
      'label' => t('River/Section (alternate)'),
      'field types' => array('node_reference'),
    ),
  );
}

/**
 * Somehow this gets invoked when Portage formatter above is specified in views,
 * for field_portage.
 *
 * Implements hook_field_formatter_view().
 */
function rivers_guide_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();

  $output = '';

  switch ($display['type']) {

    case 'rivers_guide_portage_formatter':
      foreach ($items as $delta => $item) {
        if (!empty($item['value'])) {
          $output .= '(P)';
        }
      }
      if (isset($output)) {
        // Assign it to the #markup of the element.
        $element[0]['#markup'] = ' <span class="portage">' . $output . '</span>';
      }
      break;

    // Change link to show River name/Section name (alternate name).
    case 'rivers_guide_node_reference_formatter':

      foreach ($items as $delta => $item) {
        if (!empty($item['nid'])) {
          $node = node_load($item['nid']);
          $section_name = $node->field_river_name[LANGUAGE_NONE][0]['value'] . '/' . $node->title;
          if (isset($node->field_alternate_name[LANGUAGE_NONE][0]) && $node->field_alternate_name[LANGUAGE_NONE][0]['value'] != '') {
            $section_name .= ' (' . $node->field_alternate_name[LANGUAGE_NONE][0]['value'] . ')';
          }
          $output .= l($section_name, 'node/' . $item['nid']);
        }
      }
      if (isset($output)) {
        // Assign it to the #markup of the element.
        $element[0]['#markup'] = $output;
      }
      break;
  }

  return $element;
}

/**
 * Display region and river name as links back to view (e.g. Canterbury => nz/canterbury).
 *
 * Implements hook_views_pre_render().
 */
function rivers_guide_views_pre_render(&$view) {

  switch ($view->name) {
    case 'rivers_sections':
      foreach ($view->result as $key => $row) {

        // Override region.
        $region = $view->result[$key]->field_field_region[0]['rendered']['#markup'];
        $view->result[$key]->field_field_region[0]['rendered']['#markup'] = rivers_guide_override_region(
          $view,
          $region
        );

        // Override river name.
        $river_name = $view->result[$key]->field_field_river_name[0]['rendered']['#markup'];
        $view->result[$key]->field_field_river_name[0]['rendered']['#markup'] = rivers_guide_override_river_name(
          $view,
          $region,
          $river_name
        );
      }
      break;
  }

}

/**
 * Add CSS to hide River name filter as this is driven by river name link and URL arguments.
 *
 * Implements hook_views_post_render().
 */
function rivers_guide_views_post_render(&$view, &$output, &$cache) {
  switch ($view->name) {
    case 'rivers_sections':
      drupal_add_css(drupal_get_path('module', 'rivers_guide') . '/rivers_guide.css');
      break;
  }
}

/**
 * Convert text region to link.
 * e.g. "West Coast" to <a href="/nz/west-coast">West Coast</a>.
 */
function rivers_guide_override_region($view, $region) {
  $display_id = 'page';
  $path = $view->display[$display_id]->handler->options['path'];
  $output = l($region, rivers_guide_alias(array($path, $region)));
  return $output;
}

/**
 * Convert text river name to link.
 */
function rivers_guide_override_river_name($view, $region, $river_name) {
  $display_id = 'page';
  $path = $view->display[$display_id]->handler->options['path'];
  $output = l($river_name, rivers_guide_alias(array($path, $region, $river_name)));
  return $output;
}

/**
 * Given an array of path components, returns url alias.
 */
function rivers_guide_alias($path_array) {
  $map = array("'" => '', ' ' => '-');

  foreach ($path_array as $key => $value) {
    $value = str_replace(array_keys($map), array_values($map), $value);
    $path_array[$key] = strtolower($value);
  }
  $output = implode('/', $path_array);
  return $output;
}

/**
 * On Section node pages, add region and river name to breadcrumb.
 *
 * Implements hook_menu_breadcrumb_alter().
 */
function rivers_guide_menu_breadcrumb_alter(&$active_trail, $item) {
  if ($item['path'] == 'node/%' && $item['page_arguments'][0]->type == 'section') {
    $node = $item['page_arguments'][0];
    $region = $node->field_region[LANGUAGE_NONE][0]['value'];
    $river_name = $node->field_river_name[LANGUAGE_NONE][0]['value'];

    // Assume existing breadcrumb is Home > node.
    $breadcrumb_new = array();
    $breadcrumb_new[] = $active_trail[0];
    $breadcrumb_new[] = array(
      'title' => 'NZ',
      'href' => rivers_guide_alias(array('nz')),
      'localized_options' => array(),
    );
    $breadcrumb_new[] = array(
      'title' => $region,
      'href' => rivers_guide_alias(array('nz', $region)),
      'localized_options' => array(),
    );
    $breadcrumb_new[] = array(
      'title' => $river_name,
      'href' => rivers_guide_alias(array('nz', $region, $river_name)),
      'localized_options' => array(),
    );
    $breadcrumb_new[] = end($active_trail);
    $active_trail = $breadcrumb_new;
  }
}

/**
 * #72 Hutt Gorge in the guide is returning 301 Moved Permanently and redirecting to the API
 * Looks like text/html on same path /nz/wellington/hutt/hutt-gorge as application/hal+json
 * is being cached, causing api requests to get HTML.
 *
 * Implements hook_node_view().
 */
function rivers_guide_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'section' && $view_mode == 'full') {
    if (substr($_SERVER['HTTP_ACCEPT'], 0, 9) == 'text/html') {
      drupal_add_http_header('Vary', 'Accept', TRUE);
    }
  }
  // Redirect to riverguide
  $url = 'https://riverguide.co.nz/?from=' . drupal_get_path_alias($_GET['q']);

  if (user_access('administer nodes')) {
    drupal_set_message(t('Would be redirecting to @url', array('@url' => $url)), 'warning');
    return;
  }
  else {
    header('Location: ' . $url, TRUE, 301);
    // The "Location" header sends a redirect status code to the HTTP daemon. In
    // some cases this can be wrong, so we make sure none of the code below the
    // drupal_goto() call gets executed upon redirection.
    drupal_exit($url);
  }
}

